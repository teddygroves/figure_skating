
// Code generated by stanc v2.26.0
#include <stan/model/model_header.hpp>
namespace simple_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 19, column 2 to column 10)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 20, column 2 to column 27)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 21, column 2 to column 44)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 24, column 2 to column 78)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 35, column 2 to column 22)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 36, column 2 to column 22)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 38, column 4 to column 44)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 39, column 4 to column 51)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 40, column 4 to column 64)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 37, column 21 to line 41, column 3)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 37, column 2 to line 41, column 3)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 27, column 2 to column 40)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 28, column 2 to column 25)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 29, column 2 to column 76)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 31, column 4 to column 58)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 30, column 17 to line 32, column 3)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 30, column 2 to line 32, column 3)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 6, column 2 to column 17)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 7, column 2 to column 24)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 8, column 2 to column 23)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 9, column 37 to column 38)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 9, column 2 to column 40)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 10, column 31 to column 32)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 10, column 2 to column 34)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 11, column 2 to column 22)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 12, column 42 to column 48)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 12, column 2 to column 50)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 13, column 36 to column 42)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 13, column 2 to column 44)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 14, column 2 to column 34)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 15, column 2 to column 21)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 16, column 2 to column 33)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 20, column 9 to column 17)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 21, column 18 to column 27)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 24, column 10 to column 19)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 35, column 9 to column 15)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 36, column 9 to column 15)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 4, column 4, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 3, column 52, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 8, column 9, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 8, column 18, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 8, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 10, column 4, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 9, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 11, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 7, column 54, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 15, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 14, column 53, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 19, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 20, column 9, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 20, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 22, column 4, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 21, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 23, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 18, column 26, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 27, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 28, column 9, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 28, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 30, column 4, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 29, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 31, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 26, column 24, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 38, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 39, column 9, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 39, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 40, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 41, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 42, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 43, column 2, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)",
                                                      " (in '/Users/tedgro/Code/figure_skating/src/stan/custom_functions.stan', line 34, column 73, included from\n'/Users/tedgro/Code/figure_skating/src/stan/simple.stan', line 3, column 0)"};


template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
standardise_vector(const T0__& v_arg__, const T1__& mu, const T2__& s,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          T2__>;
  const auto& v = to_ref(v_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 38;
    return divide(subtract(v, mu), (2 * s));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct standardise_vector_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
operator()(const T0__& v, const T1__& mu, const T2__& s,
           std::ostream* pstream__)  const 
{
return standardise_vector(v, mu, s, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
standardise_cols(const T0__& m_arg__, const T1__& mu_arg__,
                 const T2__& s_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  const auto& m = to_ref(m_arg__);
  const auto& mu = to_ref(mu_arg__);
  const auto& s = to_ref(s_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 40;
    validate_non_negative_index("out", "rows(m)", rows(m));
    current_statement__ = 41;
    validate_non_negative_index("out", "cols(m)", cols(m));
    Eigen::Matrix<local_scalar_t__, -1, -1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, -1>(rows(m), cols(m));
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 44;
    for (int c = 1; c <= cols(m); ++c) {
      current_statement__ = 43;
      assign(out,
        cons_list(index_omni(), cons_list(index_uni(c), nil_index_list())),
        standardise_vector(
          rvalue(m,
            cons_list(index_omni(),
              cons_list(index_uni(c), nil_index_list())), "m"), mu[(c - 1)],
          s[(c - 1)], pstream__), "assigning variable out");}
    current_statement__ = 45;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct standardise_cols_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
operator()(const T0__& m, const T1__& mu, const T2__& s,
           std::ostream* pstream__)  const 
{
return standardise_cols(m, mu, s, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
unstandardise_vector(const T0__& v_arg__, const T1__& m, const T2__& s,
                     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          T2__>;
  const auto& v = to_ref(v_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 47;
    return add(m, multiply(multiply(v, 2), s));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct unstandardise_vector_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
operator()(const T0__& v, const T1__& m, const T2__& s,
           std::ostream* pstream__)  const 
{
return unstandardise_vector(v, m, s, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
col_means(const T0__& m_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& m = to_ref(m_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int C;
    C = std::numeric_limits<int>::min();
    
    current_statement__ = 49;
    C = cols(m);
    current_statement__ = 50;
    validate_non_negative_index("out", "C", C);
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(C);
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 53;
    for (int c = 1; c <= C; ++c) {
      current_statement__ = 52;
      assign(out, cons_list(index_uni(c), nil_index_list()),
        mean(
          rvalue(m,
            cons_list(index_omni(),
              cons_list(index_uni(c), nil_index_list())), "m")),
        "assigning variable out");}
    current_statement__ = 54;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct col_means_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& m, std::ostream* pstream__)  const 
{
return col_means(m, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
col_sds(const T0__& m_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& m = to_ref(m_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int C;
    C = std::numeric_limits<int>::min();
    
    current_statement__ = 56;
    C = cols(m);
    current_statement__ = 57;
    validate_non_negative_index("out", "C", C);
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(C);
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 60;
    for (int c = 1; c <= C; ++c) {
      current_statement__ = 59;
      assign(out, cons_list(index_uni(c), nil_index_list()),
        sd(
          rvalue(m,
            cons_list(index_omni(),
              cons_list(index_uni(c), nil_index_list())), "m")),
        "assigning variable out");}
    current_statement__ = 61;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct col_sds_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& m, std::ostream* pstream__)  const 
{
return col_sds(m, pstream__);
}
};

template <typename T0__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T2__>, -1, 1>
get_ordered_from_diffs(const T0__& diffs_arg__, const int& fixed_ix,
                       const T2__& fixed_val, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T2__>;
  const auto& diffs = to_ref(diffs_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 63;
    K = (rows(diffs) + 1);
    current_statement__ = 64;
    validate_non_negative_index("out", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 66;
    assign(out, cons_list(index_uni(fixed_ix), nil_index_list()), fixed_val,
      "assigning variable out");
    current_statement__ = 67;
    assign(out,
      cons_list(index_min_max(1, (fixed_ix - 1)), nil_index_list()),
      reverse(
        minus(
          cumulative_sum(
            reverse(
              rvalue(diffs,
                cons_list(index_min_max(1, (fixed_ix - 1)), nil_index_list()),
                "diffs"))))), "assigning variable out");
    current_statement__ = 68;
    assign(out,
      cons_list(index_min_max((fixed_ix + 1), K), nil_index_list()),
      cumulative_sum(
        rvalue(diffs,
          cons_list(index_min_max(fixed_ix, (K - 1)), nil_index_list()),
          "diffs")), "assigning variable out");
    current_statement__ = 69;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_ordered_from_diffs_functor__ {
template <typename T0__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T2__>, -1, 1>
operator()(const T0__& diffs, const int& fixed_ix, const T2__& fixed_val,
           std::ostream* pstream__)  const 
{
return get_ordered_from_diffs(diffs, fixed_ix, fixed_val, pstream__);
}
};

class simple_model final : public model_base_crtp<simple_model> {

 private:
  int N;
  int N_skater;
  int N_grade;
  std::vector<int> skater;
  std::vector<int> y;
  int N_test;
  std::vector<int> skater_test;
  std::vector<int> y_test;
  int likelihood;
  Eigen::Matrix<double, -1, 1> prior_mu;
  Eigen::Matrix<double, -1, 1> prior_cutpoint_diffs;
  int cutpoint_diffs_1dim__;
  int cutpoints_1dim__;
 
 public:
  ~simple_model() { }
  
  inline std::string model_name() const final { return "simple_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.0", "stancflags = --include_paths=/Users/tedgro/Code/figure_skating/src/stan"};
  }
  
  
  simple_model(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "simple_model_namespace::simple_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 18;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 18;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 18;
      current_statement__ = 18;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 19;
      context__.validate_dims("data initialization","N_skater","int",
          context__.to_vec());
      N_skater = std::numeric_limits<int>::min();
      
      current_statement__ = 19;
      N_skater = context__.vals_i("N_skater")[(1 - 1)];
      current_statement__ = 19;
      current_statement__ = 19;
      check_greater_or_equal(function__, "N_skater", N_skater, 1);
      current_statement__ = 20;
      context__.validate_dims("data initialization","N_grade","int",
          context__.to_vec());
      N_grade = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      N_grade = context__.vals_i("N_grade")[(1 - 1)];
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "N_grade", N_grade, 1);
      current_statement__ = 21;
      validate_non_negative_index("skater", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization","skater","int",
          context__.to_vec(N));
      skater = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 22;
      assign(skater, nil_index_list(), context__.vals_i("skater"),
        "assigning variable skater");
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_greater_or_equal(function__, "skater[sym1__]",
                               skater[(sym1__ - 1)], 1);}
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 22;
        current_statement__ = 22;
        check_less_or_equal(function__, "skater[sym1__]",
                            skater[(sym1__ - 1)], N_skater);}
      current_statement__ = 23;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(N));
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 24;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 1);}
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_less_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], N_grade);
      }
      current_statement__ = 25;
      context__.validate_dims("data initialization","N_test","int",
          context__.to_vec());
      N_test = std::numeric_limits<int>::min();
      
      current_statement__ = 25;
      N_test = context__.vals_i("N_test")[(1 - 1)];
      current_statement__ = 25;
      current_statement__ = 25;
      check_greater_or_equal(function__, "N_test", N_test, 1);
      current_statement__ = 26;
      validate_non_negative_index("skater_test", "N_test", N_test);
      current_statement__ = 27;
      context__.validate_dims("data initialization","skater_test","int",
          context__.to_vec(N_test));
      skater_test = std::vector<int>(N_test, std::numeric_limits<int>::min());
      
      current_statement__ = 27;
      assign(skater_test, nil_index_list(), context__.vals_i("skater_test"),
        "assigning variable skater_test");
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_greater_or_equal(function__, "skater_test[sym1__]",
                               skater_test[(sym1__ - 1)], 1);}
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_less_or_equal(function__, "skater_test[sym1__]",
                            skater_test[(sym1__ - 1)], N_skater);}
      current_statement__ = 28;
      validate_non_negative_index("y_test", "N_test", N_test);
      current_statement__ = 29;
      context__.validate_dims("data initialization","y_test","int",
          context__.to_vec(N_test));
      y_test = std::vector<int>(N_test, std::numeric_limits<int>::min());
      
      current_statement__ = 29;
      assign(y_test, nil_index_list(), context__.vals_i("y_test"),
        "assigning variable y_test");
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        current_statement__ = 29;
        current_statement__ = 29;
        check_greater_or_equal(function__, "y_test[sym1__]",
                               y_test[(sym1__ - 1)], 1);}
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        current_statement__ = 29;
        current_statement__ = 29;
        check_less_or_equal(function__, "y_test[sym1__]",
                            y_test[(sym1__ - 1)], N_grade);}
      current_statement__ = 30;
      context__.validate_dims("data initialization","likelihood","int",
          context__.to_vec());
      likelihood = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 30;
      current_statement__ = 30;
      check_greater_or_equal(function__, "likelihood", likelihood, 0);
      current_statement__ = 30;
      current_statement__ = 30;
      check_less_or_equal(function__, "likelihood", likelihood, 1);
      current_statement__ = 31;
      context__.validate_dims("data initialization","prior_mu","double",
          context__.to_vec(2));
      prior_mu = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(prior_mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_mu_flat__;
        current_statement__ = 31;
        assign(prior_mu_flat__, nil_index_list(),
          context__.vals_r("prior_mu"), "assigning variable prior_mu_flat__");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 31;
          assign(prior_mu, cons_list(index_uni(sym1__), nil_index_list()),
            prior_mu_flat__[(pos__ - 1)], "assigning variable prior_mu");
          current_statement__ = 31;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 32;
      context__.validate_dims("data initialization","prior_cutpoint_diffs",
          "double",context__.to_vec(2));
      prior_cutpoint_diffs = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(prior_cutpoint_diffs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_cutpoint_diffs_flat__;
        current_statement__ = 32;
        assign(prior_cutpoint_diffs_flat__, nil_index_list(),
          context__.vals_r("prior_cutpoint_diffs"),
          "assigning variable prior_cutpoint_diffs_flat__");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 32;
          assign(prior_cutpoint_diffs,
            cons_list(index_uni(sym1__), nil_index_list()),
            prior_cutpoint_diffs_flat__[(pos__ - 1)],
            "assigning variable prior_cutpoint_diffs");
          current_statement__ = 32;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 33;
      validate_non_negative_index("ability", "N_skater", N_skater);
      current_statement__ = 34;
      cutpoint_diffs_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 34;
      cutpoint_diffs_1dim__ = (N_grade - 2);
      current_statement__ = 34;
      validate_non_negative_index("cutpoint_diffs", "N_grade - 2",
                                  cutpoint_diffs_1dim__);
      current_statement__ = 35;
      cutpoints_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 35;
      cutpoints_1dim__ = (N_grade - 1);
      current_statement__ = 35;
      validate_non_negative_index("cutpoints", "N_grade - 1",
                                  cutpoints_1dim__);
      current_statement__ = 36;
      validate_non_negative_index("yrep", "N_test", N_test);
      current_statement__ = 37;
      validate_non_negative_index("llik", "N_test", N_test);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += N_skater;
      num_params_r__ += cutpoint_diffs_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "simple_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ mu;
      mu = DUMMY_VAR__;
      
      current_statement__ = 1;
      mu = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> ability;
      ability = Eigen::Matrix<local_scalar_t__, -1, 1>(N_skater);
      stan::math::fill(ability, DUMMY_VAR__);
      
      current_statement__ = 2;
      ability = in__.vector(N_skater);
      Eigen::Matrix<local_scalar_t__, -1, 1> cutpoint_diffs;
      cutpoint_diffs = Eigen::Matrix<local_scalar_t__, -1, 1>(cutpoint_diffs_1dim__);
      stan::math::fill(cutpoint_diffs, DUMMY_VAR__);
      
      current_statement__ = 3;
      cutpoint_diffs = in__.vector(cutpoint_diffs_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= cutpoint_diffs_1dim__; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(cutpoint_diffs,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(cutpoint_diffs[(sym1__ - 1)], 0, lp__),
            "assigning variable cutpoint_diffs");
        } else {
          current_statement__ = 3;
          assign(cutpoint_diffs,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(cutpoint_diffs[(sym1__ - 1)], 0),
            "assigning variable cutpoint_diffs");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> cutpoints;
      cutpoints = Eigen::Matrix<local_scalar_t__, -1, 1>(cutpoints_1dim__);
      stan::math::fill(cutpoints, DUMMY_VAR__);
      
      current_statement__ = 4;
      assign(cutpoints, nil_index_list(),
        get_ordered_from_diffs(cutpoint_diffs, 5, 0, pstream__),
        "assigning variable cutpoints");
      current_statement__ = 4;
      current_statement__ = 4;
      check_ordered(function__, "cutpoints", cutpoints);
      {
        current_statement__ = 12;
        lp_accum__.add(
          normal_lpdf<propto__>(mu, prior_mu[(1 - 1)], prior_mu[(2 - 1)]));
        current_statement__ = 13;
        lp_accum__.add(normal_lpdf<propto__>(ability, 0, 1));
        current_statement__ = 14;
        lp_accum__.add(
          normal_lpdf<propto__>(cutpoint_diffs,
            prior_cutpoint_diffs[(1 - 1)], prior_cutpoint_diffs[(2 - 1)]));
        current_statement__ = 17;
        if (likelihood) {
          current_statement__ = 15;
          lp_accum__.add(
            ordered_logistic_lpmf<propto__>(y,
              add(mu,
                rvalue(ability,
                  cons_list(index_multi(skater), nil_index_list()),
                  "ability")), cutpoints));
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "simple_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu = in__.scalar();
      Eigen::Matrix<double, -1, 1> ability;
      ability = Eigen::Matrix<double, -1, 1>(N_skater);
      stan::math::fill(ability, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      ability = in__.vector(N_skater);
      Eigen::Matrix<double, -1, 1> cutpoint_diffs;
      cutpoint_diffs = Eigen::Matrix<double, -1, 1>(cutpoint_diffs_1dim__);
      stan::math::fill(cutpoint_diffs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      cutpoint_diffs = in__.vector(cutpoint_diffs_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= cutpoint_diffs_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(cutpoint_diffs,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(cutpoint_diffs[(sym1__ - 1)], 0),
          "assigning variable cutpoint_diffs");}
      Eigen::Matrix<double, -1, 1> cutpoints;
      cutpoints = Eigen::Matrix<double, -1, 1>(cutpoints_1dim__);
      stan::math::fill(cutpoints, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(mu);
      for (int sym1__ = 1; sym1__ <= N_skater; ++sym1__) {
        vars__.emplace_back(ability[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= cutpoint_diffs_1dim__; ++sym1__) {
        vars__.emplace_back(cutpoint_diffs[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      assign(cutpoints, nil_index_list(),
        get_ordered_from_diffs(cutpoint_diffs, 5, 0, pstream__),
        "assigning variable cutpoints");
      current_statement__ = 4;
      current_statement__ = 4;
      check_ordered(function__, "cutpoints", cutpoints);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= cutpoints_1dim__; ++sym1__) {
          vars__.emplace_back(cutpoints[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> yrep;
      yrep = Eigen::Matrix<double, -1, 1>(N_test);
      stan::math::fill(yrep, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> llik;
      llik = Eigen::Matrix<double, -1, 1>(N_test);
      stan::math::fill(llik, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int n = 1; n <= N_test; ++n) {
        double eta;
        eta = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 7;
        eta = (mu + ability[(skater_test[(n - 1)] - 1)]);
        current_statement__ = 8;
        assign(yrep, cons_list(index_uni(n), nil_index_list()),
          ordered_logistic_rng(eta, cutpoints, base_rng__),
          "assigning variable yrep");
        current_statement__ = 9;
        assign(llik, cons_list(index_uni(n), nil_index_list()),
          ordered_logistic_lpmf<false>(y_test[(n - 1)], eta, cutpoints),
          "assigning variable llik");}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        vars__.emplace_back(yrep[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        vars__.emplace_back(llik[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu = context__.vals_r("mu")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> ability;
      ability = Eigen::Matrix<double, -1, 1>(N_skater);
      stan::math::fill(ability, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ability_flat__;
        current_statement__ = 2;
        assign(ability_flat__, nil_index_list(), context__.vals_r("ability"),
          "assigning variable ability_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_skater; ++sym1__) {
          current_statement__ = 2;
          assign(ability, cons_list(index_uni(sym1__), nil_index_list()),
            ability_flat__[(pos__ - 1)], "assigning variable ability");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> cutpoint_diffs;
      cutpoint_diffs = Eigen::Matrix<double, -1, 1>(cutpoint_diffs_1dim__);
      stan::math::fill(cutpoint_diffs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> cutpoint_diffs_flat__;
        current_statement__ = 3;
        assign(cutpoint_diffs_flat__, nil_index_list(),
          context__.vals_r("cutpoint_diffs"),
          "assigning variable cutpoint_diffs_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= cutpoint_diffs_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(cutpoint_diffs,
            cons_list(index_uni(sym1__), nil_index_list()),
            cutpoint_diffs_flat__[(pos__ - 1)],
            "assigning variable cutpoint_diffs");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> cutpoint_diffs_free__;
      cutpoint_diffs_free__ = Eigen::Matrix<double, -1, 1>(cutpoint_diffs_1dim__);
      stan::math::fill(cutpoint_diffs_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= cutpoint_diffs_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(cutpoint_diffs_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(cutpoint_diffs[(sym1__ - 1)], 0),
          "assigning variable cutpoint_diffs_free__");}
      vars__.emplace_back(mu);
      for (int sym1__ = 1; sym1__ <= N_skater; ++sym1__) {
        vars__.emplace_back(ability[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= cutpoint_diffs_1dim__; ++sym1__) {
        vars__.emplace_back(cutpoint_diffs_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("mu");
    names__.emplace_back("ability");
    names__.emplace_back("cutpoint_diffs");
    names__.emplace_back("cutpoints");
    names__.emplace_back("yrep");
    names__.emplace_back("llik");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_skater)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(cutpoint_diffs_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(cutpoints_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_test)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_test)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu");
    for (int sym1__ = 1; sym1__ <= N_skater; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ability" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= cutpoint_diffs_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "cutpoint_diffs" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= cutpoints_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cutpoints" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yrep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llik" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu");
    for (int sym1__ = 1; sym1__ <= N_skater; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ability" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= cutpoint_diffs_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "cutpoint_diffs" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= cutpoints_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cutpoints" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yrep" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llik" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ability\",\"type\":{\"name\":\"vector\",\"length\":" << N_skater << "},\"block\":\"parameters\"},{\"name\":\"cutpoint_diffs\",\"type\":{\"name\":\"vector\",\"length\":" << cutpoint_diffs_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"cutpoints\",\"type\":{\"name\":\"vector\",\"length\":" << cutpoints_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"yrep\",\"type\":{\"name\":\"vector\",\"length\":" << N_test << "},\"block\":\"generated_quantities\"},{\"name\":\"llik\",\"type\":{\"name\":\"vector\",\"length\":" << N_test << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ability\",\"type\":{\"name\":\"vector\",\"length\":" << N_skater << "},\"block\":\"parameters\"},{\"name\":\"cutpoint_diffs\",\"type\":{\"name\":\"vector\",\"length\":" << cutpoint_diffs_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"cutpoints\",\"type\":{\"name\":\"vector\",\"length\":" << cutpoints_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"yrep\",\"type\":{\"name\":\"vector\",\"length\":" << N_test << "},\"block\":\"generated_quantities\"},{\"name\":\"llik\",\"type\":{\"name\":\"vector\",\"length\":" << N_test << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = simple_model_namespace::simple_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return simple_model_namespace::profiles__;
}

#endif


